1. Explain basic security terms like authentication, authorization, confidentiality, integrity, SSL/TLS and
   provide examples of how you have used them.

   Authentication, is the process of identifying an individual in a
   system, usually by password and username. We have used Passport.js to
   help us with authentication in any system requiring a log in. This
   helps us check if the individual is who they claim to be.
   app.post('/login', passport.authenticate('local',
   {
   successRedirect: '/',
    failureRedirect: '/login'
   }));
   Authorization is the process of giving an individual access to the
   system objects based on their identity. We have used passport.js to
   help with authorization when making a system requiring a log in and
   deciding what the user can see/use from the system.
   app.post('/login', passport.authenticate('local',
   {
   successRedirect: '/',
    failureRedirect: '/login'
   }));
   app.get('/admin', user.is('admin'), function (req, res) {
    res.render('admin');
   }
   Confidentiality refers to protecting information from being accessed
   by unauthorized parties. Only authorized parties can see certain
   information. We have used confidentiality in systems that require
   authorization, as we only want to show private information to the user
   himself.
   Integrity means that the information on the system is authentic,
   meaning that it isn't maliciously altered and the source of the
   information is genuine. Integrity is used in all web systems we have
   developed. We do so by making the backend unalterable and unattainable
   unless properly authorized.
   SSL and TLS: TLS is a newer and safer security protocol based on
   public key cryptography, based on SSL. They are used to encrypt
   messages between servers and clients. We have used SSL or TLS when
   making web applications.

2. Explain basic security threads like: Cross Site Scripting (XSS), SQL Injection and whether something similar
   to SQL injection is possible with NoSQL databases like MongoDB, and DOS-attacks. Explain/demonstrate
   ways to cope with these problems

3. Explain, at a fundamental level, the technologies involved, and the steps required initialize a SSL connection
   between a browser and a server and how to use SSL in a secure way.

    SSL (Secure Sockets Layer) is the standard security technology for establishing an encrypted link between a
    web server and a browser. This link ensures that all data passed between the web server and browsers remain
    private and integral. SSL is an industry standard
    To be able to create a SSL connection a web server requires an SSL Certificate.
    How it works?
    When a Web browser tries to connect to a website using SSL, the browser will first request the web server
    identify itself. This prompts the web server to send the browser a copy of the SSL Certificate. The browser
    checks to see if the SSL Certificate is trusted --  if the SSL Certificate is trusted, then the browser
    sends a message to the Web server. The server then responds to the browser with a digitally signed
    acknowledgement to start an SSL encrypted session. This allows encrypted data to be shared between
    the browser and the server. You may notice that your browsing session now starts with https (and not http).

4.  Explain and demonstrate ways to protect user passwords on our backends, and why this is necessary.

    Passwords are the gateway to access personal information from a
    system. If the password is leaked or discovered by a third party they
    will have access to all the personal information stored on that
    system. Thus, the need for password encryption. Even if a third party
    is able to access the database in which all passwords are stored, the
    third party will still not know the password as encryption only works
    one way. Password to encryption, not encryption to password. We are
    able to encrypt passwords using algorithms. Specifically we have used
    tools such as bcrypt or PBKDF2, with these tools we also add salt.
    Which is further used to protect encrypted data.

    UserSchema.pre('save', function (next) {
     var user = this;
     if (this.isModified('password') || this.isNew) {
     bcrypt.genSalt(10, function (err, salt) {
     if (err) return next(err);
     bcrypt.hash(user.password, salt, function (err, hash) {
     if (err) return next(err);
     user.password = hash;
     next();
     });
     });
     } else {
     return next();
     }
    });

5.  Explain about password hashing, salts and the difference between bcrypt and older (not recommended)
    algorithms like sha1, md5 etc.

6.  Explain about JSON Web Tokens (jwt) and why they are very suited for a REST-based API.

    JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely
    transmitting information between parties as a JSON object. It is suited for REST-based APIs because it is sent with
    every API call and is also a JSON object.


7.  Explain and demonstrate a system using jwt's, focusing on both client and server side.

    A system using jwt’s work in a certain flow. Initially starting with
    the client inputting both their password and username leading to
    authentication and then authorization. Once authenticated the client
    is generated a token and the token is then stored client side. With
    every request made from the client the JWT is sent as well in the
    authorization header. Once the JWt is signature of the JWT is
    confirmed a response is created by the server.
    This code is placed in the route page. Once the user is authenticated
    a token is given to the user.
     app.post('/login', function(req, res, next){
     passport.authenticate('local-login',
     function(err, user, info) {
     if (err) { return next(err) }
     if (!user) {
     return res.json(401, { error: 'message' });
     }
     var token = jwt.encode({ username: user},
    "ThisIsATokenSecret");
     res.json({ token : token });
     })(req, res, next);
     });

8.  Explain and demonstrate use of the npm passportjs module

9.  Explain, at a very basic level, OAuth 2 + OpenID Connect and the problems it solves.

    OAuth 2 is an authorization framework that enables applications to obtain limited access to user accounts on an
     HTTP service, such as Facebook, GitHub, and DigitalOcean. It works by delegating user authentication to the
     service that hosts the user account, and authorizing third-party applications to access the user account.
     OAuth 2 provides authorization flows for web and desktop applications, and mobile devices.

     OpenID allows you to use an existing account to sign in to multiple websites, without needing to create new passwords.
     You may choose to associate information with your OpenID that can be shared with the websites you visit, such
     as a name or email address. With OpenID, you control how much of that information is shared with the websites you visit.

     With OpenID, your password is only given to your identity provider, and that provider then confirms your identity to
     the websites you visit.  Other than your provider, no website ever sees your password, so you don’t need to worry
     about an unscrupulous or insecure website compromising your identity.

10. Demonstrate, with focus on security, a proposal for an Express/Mongo+Angular-seed with built in support
    for most of the basic security problems, SSL and ready to deploy on your favourite Cloud Hosting Service.