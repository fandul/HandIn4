1. Explain basic security terms like authentication, authorization, confidentiality, integrity, SSL/TLS and
   provide examples of how you have used them.

   Authentication, is the process of identifying an individual in a
   system, usually by password and username. We have used Passport.js to
   help us with authentication in any system requiring a log in. This
   helps us check if the individual is who they claim to be.
   app.post('/login', passport.authenticate('local',
   {
   successRedirect: '/',
    failureRedirect: '/login'
   }));
   Authorization is the process of giving an individual access to the
   system objects based on their identity. We have used passport.js to
   help with authorization when making a system requiring a log in and
   deciding what the user can see/use from the system.
   app.post('/login', passport.authenticate('local',
   {
   successRedirect: '/',
    failureRedirect: '/login'
   }));
   app.get('/admin', user.is('admin'), function (req, res) {
    res.render('admin');
   }
   Confidentiality refers to protecting information from being accessed
   by unauthorized parties. Only authorized parties can see certain
   information. We have used confidentiality in systems that require
   authorization, as we only want to show private information to the user
   himself.
   Integrity means that the information on the system is authentic,
   meaning that it isn't maliciously altered and the source of the
   information is genuine. Integrity is used in all web systems we have
   developed. We do so by making the backend unalterable and unattainable
   unless properly authorized.
   SSL and TLS: TLS is a newer and safer security protocol based on
   public key cryptography, based on SSL. They are used to encrypt
   messages between servers and clients. We have used SSL or TLS when
   making web applications.

2. Explain basic security threads like: Cross Site Scripting (XSS), SQL Injection and whether something similar
   to SQL injection is possible with NoSQL databases like MongoDB, and DOS-attacks. Explain/demonstrate
   ways to cope with these problems.

   XSS injection attacks occur when an attacker uses a web application
    to send malicious code, generally in the form of a browser side script, to a different end user.
    Flaws that allow these attacks to succeed are quite widespread and occur anywhere in a web application.
    An attacker can use XSS to send a malicious script to an unsuspecting user.
    The end userâ€™s browser has no way to know that the script should not be trusted, and will execute the script.
    Because it thinks the script came from a trusted source, the malicious script can access any cookies,
    session tokens, or other sensitive information retained by the browser and used with that site.
    These scripts can even rewrite the content of the HTML page.
    The malicious content sent to the web browser often takes the form of a segment of JavaScript,
    but may also include HTML, Flash, or any other type of code that the browser may execute.
    The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data,
    like cookies or other session information, to the attacker, redirecting the victim to web content controlled
    by the attacker, or performing other malicious operations on the user's machine under the guise of the
    vulnerable site.

     A SQL injection attack consists of insertion or "injection" of a SQL query via the input data from the client
     to the application. A successful SQL injection exploit can read sensitive data from the database,
     modify database data (Insert/Update/Delete), execute administration operations on the database
     (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in
     some cases issue commands to the operating system. SQL injection attacks are a type of injection attack,
     in which SQL commands are injected into data-plane input in order to effect the execution of
     predefined SQL commands.

       >> DOS-attack
      You send a lot of data to the server, and therefore overload the server, if you have a large server,
      you deny other users to access the server.

3. Explain, at a fundamental level, the technologies involved, and the steps required initialize a SSL connection
   between a browser and a server and how to use SSL in a secure way.

    SSL (Secure Sockets Layer) is the standard security technology for establishing an encrypted link between a
    web server and a browser. This link ensures that all data passed between the web server and browsers remain
    private and integral. SSL is an industry standard
    To be able to create a SSL connection a web server requires an SSL Certificate.
    How it works?
    When a Web browser tries to connect to a website using SSL, the browser will first request the web server
    identify itself. This prompts the web server to send the browser a copy of the SSL Certificate. The browser
    checks to see if the SSL Certificate is trusted --  if the SSL Certificate is trusted, then the browser
    sends a message to the Web server. The server then responds to the browser with a digitally signed
    acknowledgement to start an SSL encrypted session. This allows encrypted data to be shared between
    the browser and the server. You may notice that your browsing session now starts with https (and not http).

4.  Explain and demonstrate ways to protect user passwords on our backends, and why this is necessary.

    Passwords are the gateway to access personal information from a
    system. If the password is leaked or discovered by a third party they
    will have access to all the personal information stored on that
    system. Thus, the need for password encryption. Even if a third party
    is able to access the database in which all passwords are stored, the
    third party will still not know the password as encryption only works
    one way. Password to encryption, not encryption to password. We are
    able to encrypt passwords using algorithms. Specifically we have used
    tools such as bcrypt or PBKDF2, with these tools we also add salt.
    Which is further used to protect encrypted data.

    UserSchema.pre('save', function (next) {
     var user = this;
     if (this.isModified('password') || this.isNew) {
     bcrypt.genSalt(10, function (err, salt) {
     if (err) return next(err);
     bcrypt.hash(user.password, salt, function (err, hash) {
     if (err) return next(err);
     user.password = hash;
     next();
     });
     });
     } else {
     return next();
     }
    });

5.  Explain about password hashing, salts and the difference between bcrypt and older (not recommended)
    algorithms like sha1, md5 etc.

    hash("hello") = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
     hash("hbllo") = 58756879c05c68dfac9866712fad6a93f8146f337a69afe7dd238f3364946366
     hash("waltz") = c0e81794384491161f1777c232bc6bd9ec38f616560b120fda8e90f383853542

     Hash algorithms are one way functions. They turn any amount of data into a fixed-length "fingerprint"
     that cannot be reversed. They also have the property that if the input changes by even a tiny bit,
     the resulting hash is completely different (see the example above). This is great for protecting passwords,
     because we want to store passwords in a form that protects them even if the password file itself is compromised,
     but at the same time, we need to be able to verify that a user's password is correct.

     The general workflow for account registration and authentication in a hash-based account system is as follows:
     1. The user creates an account.
     2. Their password is hashed and stored in the database. At no point is the plain-text (unencrypted) password
        ever written to the hard drive.
     3. When the user attempts to login, the hash of the password they entered is checked against the hash
        of their real password (retrieved from the database).
     4. If the hashes match, the user is granted access. If not, the user is told they entered invalid login credentials.
     5. Steps 3 and 4 repeat everytime someone tries to login to their account.

     In step 4, never tell the user if it was the username or password they got wrong.
     Always display a generic message like "Invalid username or password." This prevents attackers from
     enumerating valid usernames without knowing their passwords.

     Adding Salt - super safe password protection

     hash("hello")                    = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
     hash("hello" + "QxLUF1bgIAdeQX") = 9e209040c863f84a31e719795b2577523954739fe5ed3b58a75cff2127075ed1
     hash("hello" + "bv5PehSMfV11Cd") = d1d3ec2e6f20fd420d50e2642992841d8338a314b8ea157c9e18477aaef226ab
     hash("hello" + "YYLmfY6IehjZMQ") = a49670c3c18b9e079b9cfaf51634f563dc8ae3070db2c4a8544305df1b60f007

     Lookup tables and rainbow tables only work because each password is hashed the exact same way.
     If two users have the same password, they'll have the same password hashes.
     We can prevent these attacks by randomizing each hash, so that when the same password is hashed twice,
     the hashes are not the same.

     We can randomize the hashes by appending or prepending a random string, called a salt, to the password
     before hashing. As shown in the example above, this makes the same password hash into a completely
     different string every time. To check if a password is correct, we need the salt, so it is usually stored in
     the user account database along with the hash, or as part of the hash string itself.

     The salt is a slow algorithm, which make it harder for the hackers to get your password,
     because making a spreadsheet with lots of salt each taking 2-3 minutes to generate would take lots of time.
     When you have to salt and hash the data, you use Bcrypt. The reason why you use this encryption module,
     is because itâ€™s a slow algorithm. The other older algorithms are faster, and therefore the hackers
     can generate a spreadsheet faster with hashed values and passwords.

6.  Explain about JSON Web Tokens (jwt) and why they are very suited for a REST-based API.

    JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely
    transmitting information between parties as a JSON object. It is suited for REST-based APIs because it is sent with
    every API call and is also a JSON object.


7.  Explain and demonstrate a system using jwt's, focusing on both client and server side.

    A system using jwtâ€™s work in a certain flow. Initially starting with
    the client inputting both their password and username leading to
    authentication and then authorization. Once authenticated the client
    is generated a token and the token is then stored client side. With
    every request made from the client the JWT is sent as well in the
    authorization header. Once the JWt is signature of the JWT is
    confirmed a response is created by the server.
    This code is placed in the route page. Once the user is authenticated
    a token is given to the user.
     app.post('/login', function(req, res, next){
     passport.authenticate('local-login',
     function(err, user, info) {
     if (err) { return next(err) }
     if (!user) {
     return res.json(401, { error: 'message' });
     }
     var token = jwt.encode({ username: user},
    "ThisIsATokenSecret");
     res.json({ token : token });
     })(req, res, next);
     });

8.  Explain and demonstrate use of the npm passportjs module

    Passport is authentication middleware for Node.
    It is designed to serve a singular purpose: authenticate requests.
    When writing modules, encapsulation is a virtue, so Passport delegates all other functionality to the application.
    This separation of concerns keeps code clean and maintainable, and makes Passport extremely easy
    to integrate into an application.


    //Setting up the passport module:
    var passport = require('passport'),


9.  Explain, at a very basic level, OAuth 2 + OpenID Connect and the problems it solves.

    OAuth 2 is an authorization framework that enables applications to obtain limited access to user accounts on an
     HTTP service, such as Facebook, GitHub, and DigitalOcean. It works by delegating user authentication to the
     service that hosts the user account, and authorizing third-party applications to access the user account.
     OAuth 2 provides authorization flows for web and desktop applications, and mobile devices.

     OpenID allows you to use an existing account to sign in to multiple websites, without needing to create new passwords.
     You may choose to associate information with your OpenID that can be shared with the websites you visit, such
     as a name or email address. With OpenID, you control how much of that information is shared with the websites you visit.

     With OpenID, your password is only given to your identity provider, and that provider then confirms your identity to
     the websites you visit.  Other than your provider, no website ever sees your password, so you donâ€™t need to worry
     about an unscrupulous or insecure website compromising your identity.

10. Demonstrate, with focus on security, a proposal for an Express/Mongo+Angular-seed with built in support
    for most of the basic security problems, SSL and ready to deploy on your favourite Cloud Hosting Service.